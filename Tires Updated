# loading the dataset
ls(E_Data_c)

#Choice Share Calculation
countshare <- function(Xmat, yl, p, target) {
  nchoice <- nrow(Xmat) / p  # Total number of choice tasks
  neffect <- ncol(Xmat)      # Total number of attributes
  Xar <- array(t(Xmat), dim = c(neffect, p, nchoice))  # 3D array for attributes
  yar <- array(yl, dim = c(p, nchoice))  # 2D array for choices
  
  countex <- 0  # Count exposures
  countch <- 0  # Count choices
  
  for (i in 1:nchoice) {  # Loop through each choice task
    X <- t(Xar[,,i])  # Attributes matrix for the task
    y <- yar[,i]      # Choices vector for the task
    
    if (sum(X[, target]) > 0) {  # Check if the level is presented
      countex <- countex + 1  # Increment exposure counter
      if (any(X[y == 1, target] == 1)) {  # Check if the level was chosen
        countch <- countch + 1  # Increment choice counter
      }
    }
  }
  
  return(c(countch / countex, countch, countex))  # Choice share, #choices, #exposures
}


# Function to compute probabilities for a range of attribute-levels
countattribute <- function(Xmat, yl, p, attributerange) {
  out <- matrix(0, nrow = length(attributerange), ncol = 3)  # Initialize output matrix
  counter <- 0
  
  for (r in attributerange) {  # Loop through attribute range
    counter <- counter + 1
    out[counter, ] <- countshare(Xmat, yl, p, r)
  }
  
  rownames(out) <- colnames(Xmat)[attributerange]  # Set row names as attribute names
  colnames(out) <- c('choice share', '# choices', '# exposures')  # Set column names
  
  return(out)
}

# Use E_Data_c$lgtdata and combine results across respondents
X_all <- do.call(rbind, lapply(E_Data_c$lgtdata, function(respondent) respondent$X))
y_all <- unlist(lapply(E_Data_c$lgtdata, function(respondent) respondent$y))
p <- E_Data_c$p

# Example: Calculate choice probabilities for brands
brand_range <- 2:11  # Assuming columns 2 to 10 correspond to brands
brand_probabilities <- countattribute(X_all, y_all, p, brand_range)

# View results
print(brand_probabilities)

# Example: Calculate choice probabilities for type
Type <- 12:13  # Assuming columns 11 to 12 correspond to brands
Type_probabilities <- countattribute(X_all, y_all, p, Type)

# View results
print(Type_probabilities)

# Example: Calculate choice probabilities for rolling
rolling <- 18:21  # Assuming columns 11 to 12 correspond to brands
rolling_probabilities <- countattribute(X_all, y_all, p, rolling)

# View results
print(rolling_probabilities)

# Example: Calculate choice probabilities for grip
grip <- 22:25  # Assuming columns 11 to 12 correspond to brands
grip_probabilities <- countattribute(X_all, y_all, p, grip)

# View results
print(grip_probabilities)


# Example: Calculate choice probabilities for test
test <- 31:35  # Assuming columns 11 to 12 correspond to brands
test_probabilities <- countattribute(X_all, y_all, p, test)

# View results
print(test_probabilities)


# Example: Calculate choice probabilities for review attributes
review_range <- 26:30  # Assuming columns 25 to 28 correspond to review attributes
review_probabilities <- countattribute(X_all, y_all, p, review_range)

# View results
print(review_probabilities)

# Example: Calculate choice probabilities for longevity attributes
longevity_range <- 14:17  # Assuming columns 13 to 16 correspond to longevity attributes
longevity_probabilities <- countattribute(X_all, y_all, p, longevity_range)

# View results
print(longevity_probabilities)

# Combine all attribute results into one data frame
all_probabilities <- list(
  Brands = brand_probabilities,
  Type = Type_probabilities,
  Rolling = rolling_probabilities,
  Grip = grip_probabilities,
  Test = test_probabilities,
  Review = review_probabilities,
  Longevity = longevity_probabilities
)

# Convert to a single data frame
combined_probabilities <- do.call(rbind, lapply(names(all_probabilities), function(attr) {
  prob_data <- all_probabilities[[attr]]
  data.frame(
    Attribute = attr,
    Level = rownames(prob_data),
    prob_data
  )
}))

# Display combined table
print(combined_probabilities)


# Subset brand probabilities
brand_probabilities_long <- data.frame(
  Brand = rownames(brand_probabilities),
  ChoiceShare = brand_probabilities[, "choice share"]
)

# Combine all attribute probabilities into one dataframe
all_attributes_probabilities <- rbind(
  data.frame(Attribute = "Type", Level = rownames(Type_probabilities), Type_probabilities),
  data.frame(Attribute = "Rolling Resistance", Level = rownames(rolling_probabilities), rolling_probabilities),
  data.frame(Attribute = "Grip", Level = rownames(grip_probabilities), grip_probabilities),
  data.frame(Attribute = "Test", Level = rownames(test_probabilities), test_probabilities),
  data.frame(Attribute = "Review", Level = rownames(review_probabilities), review_probabilities),
  data.frame(Attribute = "Longevity", Level = rownames(longevity_probabilities), longevity_probabilities)
)

# Convert to long format for ggplot
library(reshape2)
all_attributes_long <- melt(all_attributes_probabilities, 
                            id.vars = c("Attribute", "Level"), 
                            measure.vars = "choice.share",
                            variable.name = "Metric", 
                            value.name = "Value")

# Load ggplot2
library(ggplot2)

# Create the graph
ggplot(all_attributes_long, aes(x = Level, y = Value, fill = Attribute)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ Attribute, scales = "free_x", ncol = 2) +
  labs(title = "Choice Shares Across Attributes (Excluding Brands)",
       x = "Attribute Levels",
       y = "Choice Share") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  guides(fill = guide_legend(title = "Attributes"))

# Save the graph
ggsave("choice_shares_all_attributes.png", width = 12, height = 8, dpi = 300)


# Load the car package
library(car)

# Combine X_all (attributes) and y_all (choices) into one data frame
X_all_df <- as.data.frame(X_all)
# Recreate 'id' and 'alt'
X_all_df$id <- rep(1:(nrow(X_all_df) / E_Data_c$p), each = E_Data_c$p)
X_all_df$alt <- rep(1:E_Data_c$p, times = nrow(X_all_df) / E_Data_c$p)

# Correctly calculate 'choice'
repeated_y_all <- rep(y_all, each = E_Data_c$p)  # Repeat y_all for each alternative
X_all_df$choice <- as.numeric(X_all_df$alt == repeated_y_all)

# Validate
cat("Sum of choices:", sum(X_all_df$choice), "\n")
cat("Number of tasks:", nrow(X_all_df) / E_Data_c$p, "\n")
cat("Are choices correctly assigned?", sum(X_all_df$choice) == nrow(X_all_df) / E_Data_c$p, "\n")


# Fit a linear model using your dataset
ols_model <- lm(choice ~ ., data = X_all_df)

# Calculate VIF for each variable in the model
vif_values <- vif(ols_model)

# View the VIF values
print(vif_values)



# View the summary of the regression model
summary(ols_model)

# Extract coefficients for reporting
ols_coefficients <- summary(ols_model)$coefficients
print(ols_coefficients)

# Remove baseline attributes from X for all respondents
for (i in seq_along(E_Data_c$lgtdata)) {
  E_Data_c$lgtdata[[i]]$X <- E_Data_c$lgtdata[[i]]$X[, -c(2, 26, 31)]   # Remove 'michelin', 'rev_1star', 'test_1star'
}


# Load the package
library(mclogit)


#Multinomial Logit Model Analysis
out_logit <- mclogit(
  cbind(choice, id) ~ 
    price + continental +
    goodyear +
    bridgestone +
    pirelli +
    kleber +
    bfgoodrich +
    firestone +
    hankook +
    `low_price-brand` +
    comfort_type +
    sports_type +
    min_4thou_km +
    stand_longevity_km +
    plus_4thou_km +
    plus_8thou_km +
    fuel_eff_B +
    fuel_eff_C +
    fuel_eff_E +
    fuel_eff_F +
    grip_wet_B +
    grip_wet_C +
    grip_wet_E +
    grip_wet_F + 
    rev_2star +
    rev_3star +
    rev_4star +
    rev_5star +
    test_2star +
    test_3star +
    test_4star +
    test_5star,
  data = X_all_df
)

# Summarize the model results
summary(out_logit)

# Brands Matrix (Baseline: low_price-brand)
Brands <- matrix(c(
  1, 0, 0, 0, 0, 0, 0, 0, 0,  # Continental
  0, 1, 0, 0, 0, 0, 0, 0, 0,  # Goodyear
  0, 0, 1, 0, 0, 0, 0, 0, 0,  # Bridgestone
  0, 0, 0, 1, 0, 0, 0, 0, 0,  # Pirelli
  0, 0, 0, 0, 1, 0, 0, 0, 0,  # Kleber
  0, 0, 0, 0, 0, 1, 0, 0, 0,  # BFGoodrich
  0, 0, 0, 0, 0, 0, 1, 0, 0,  # Firestone
  0, 0, 0, 0, 0, 0, 0, 1, 0   # Hankook
), byrow = TRUE, ncol = 9)

# Set row and column names
rownames(Brands) <- c("continental", "goodyear", "bridgestone", "pirelli", "kleber", "bfgoodrich", "firestone", "hankook")
colnames(Brands) <- c("continental", "goodyear", "bridgestone", "pirelli", "kleber", "bfgoodrich", "firestone", "hankook", "low_price-brand")

# Print Brands Matrix
print(Brands)


# Type Matrix (Baseline: sports_type)
Type <- matrix(c(
  1, 0  # comfort_type
), byrow = TRUE, nrow = 1)

# Set row and column names
rownames(Type) <- c("comfort_type")  # Only the non-baseline level as a row
colnames(Type) <- c("comfort_type", "sports_type")  # Include baseline in the column names

# Print the Type matrix
print(Type)

# Longevity Matrix (Baseline: min_4thou_km)
Longevity <- matrix(c(
  0, 1, 0, 0,  # stand_longevity_km
  0, 0, 1, 0,  # plus_4thou_km
  0, 0, 0, 1   # plus_8thou_km
), byrow = TRUE, nrow = 3)

# Set row and column names
rownames(Longevity) <- c("stand_longevity_km", "plus_4thou_km", "plus_8thou_km")  # Non-baseline levels as rows
colnames(Longevity) <- c("min_4thou_km", "stand_longevity_km", "plus_4thou_km", "plus_8thou_km")  # Include baseline in columns

# Print the Longevity matrix
print(Longevity)

# Rolling Matrix (Baseline: fuel_eff_B)
Rolling <- matrix(c(
  0, 1, 0, 0,  # fuel_eff_C
  0, 0, 1, 0,  # fuel_eff_E
  0, 0, 0, 1   # fuel_eff_F
), byrow = TRUE, nrow = 3)

# Set row and column names
rownames(Rolling) <- c("fuel_eff_C", "fuel_eff_E", "fuel_eff_F")  # Non-baseline levels as rows
colnames(Rolling) <- c("fuel_eff_B", "fuel_eff_C", "fuel_eff_E", "fuel_eff_F")  # Include baseline in columns

# Print the Rolling matrix
print(Rolling)

# Grip Matrix (Baseline: grip_wet_B)
Grip <- matrix(c(
  0, 1, 0, 0,  # grip_wet_C
  0, 0, 1, 0,  # grip_wet_E
  0, 0, 0, 1   # grip_wet_F
), byrow = TRUE, nrow = 3)

# Set row and column names
rownames(Grip) <- c("grip_wet_C", "grip_wet_E", "grip_wet_F")  # Non-baseline levels as rows
colnames(Grip) <- c("grip_wet_B", "grip_wet_C", "grip_wet_E", "grip_wet_F")  # Include baseline as the first column

# Print the Grip matrix
print(Grip)

# Review Matrix (Baseline: rev_2star)
Review <- matrix(c(
  0, 1, 0, 0,  # rev_3star
  0, 0, 1, 0,  # rev_4star
  0, 0, 0, 1   # rev_5star
), byrow = TRUE, nrow = 3)

# Set row and column names
rownames(Review) <- c("rev_3star", "rev_4star", "rev_5star")  # Non-baseline levels as rows
colnames(Review) <- c("rev_2star", "rev_3star", "rev_4star", "rev_5star")  # Include baseline as the first column

# Print the Review matrix
print(Review)

# Test Matrix (Baseline: test_2star)
Test <- matrix(c(
  0, 1, 0, 0,  # test_3star
  0, 0, 1, 0,  # test_4star
  0, 0, 0, 1   # test_5star
), byrow = TRUE, nrow = 3)

# Set row and column names
rownames(Test) <- c("test_3star", "test_4star", "test_5star")  # Non-baseline levels as rows
colnames(Test) <- c("test_2star", "test_3star", "test_4star", "test_5star")  # Include baseline as the first column

# Print the Test matrix
print(Test)


# Define price values for the alternatives
alt_prices <- c(5.5, 3.0, 7.6)  # Example prices corresponding to your summary statistics

# Define alternatives using the attribute matrices
alt1 <- c(
  price = alt_prices[1],
  Brands["goodyear", ],
  Type["comfort_type", ],
  Longevity["stand_longevity_km",],
  Rolling[ "fuel_eff_E",],
  Grip["grip_wet_E",],
  Review["rev_4star",],
  Test["test_5star",]
)

alt2 <- c(
  price = alt_prices[2],
  Brands["bridgestone", ],
  Type["comfort_type", ],
  Longevity["plus_4thou_km",],
  Rolling["fuel_eff_F",],
  Grip["grip_wet_F",],
  Review["rev_5star",],
  Test["test_4star",]
)

alt3 <- c(
  price = alt_prices[3],
  Brands["kleber", ],
  Type["comfort_type", ],
  Longevity["plus_8thou_km",],
  Rolling["fuel_eff_C",],
  Grip["grip_wet_C",],
  Review["rev_3star",],
  Test["test_3star",]
)

# Outside option (all zeros, representing no selection from defined alternatives)
alt_outside <- numeric(length(out_logit$coefficients))

# Combine into a choice set
choiceset <- rbind(alt1, alt2, alt3, alt_outside)

# Set column names to match out_logit coefficients
colnames(choiceset) <- names(out_logit$coefficients)

# Set row names for alternatives
rownames(choiceset) <- c("alt1", "alt2", "alt3", "outside")

# Print the choiceset
print(choiceset)

######computing 'counterfactual' choice probabilities given estimates from data######

Xbeta = choiceset %*% out_logit$coefficients

## direct 
prob_=exp(Xbeta)/sum(exp(Xbeta))

## with numerical stabilization
Xbetas = Xbeta - max(Xbeta)
logdenom = log(sum(exp(Xbetas)))
logprob = Xbetas - logdenom
prob = exp(logprob)

cbind(choiceset,prob)

#######Mixed Logit (Hierarchical Bayesian) Model without constraint########

library(bayesm)

out_HB_covariateswithoutconst <- rhierMnlRwMixture(
  Data = list(
    lgtdata = E_Data_c$lgtdata,  # All choice data
    Z = E_Data_c$Z,             # Covariates
    p = E_Data_c$p              # Number of alternatives per task
  ),
  Prior = list(ncomp = 1),      # No sign constraint applied
  Mcmc = list(R = 40000, keep = 10)  # 40,000 iterations, thinning every 10
)

#Verify Convergence of the Model
windows()
plot(out_HB_covariateswithoutconst$loglike, type = "l", main = "Log-Likelihood Over Iterations",
     xlab = "Iterations", ylab = "Log-Likelihood")

jpeg("log_likelihood_plot.jpg", width = 800, height = 600)
plot(out_HB_covariateswithoutconst$loglike, type = "l",
     main = "Log-Likelihood Over Iterations",
     xlab = "Iterations", ylab = "Log-Likelihood")
dev.off()

price_index <- 1  # Adjust this if ?price? is actually in a different column
# Extract all respondents, the price_index column, and all iterations
price_draws_3D <- betadraw_converged[, price_index, ]

# price_draws_3D is 2D now: [N_resp, N_iter_converged]
# Flatten it to 1D:
price_draws <- c(price_draws_3D)  # or as.vector(price_draws_3D)

windows()
plot(
  density(price_draws),
  main = "Price Parameter Density (Constrained Mixed Logit)",
  xlab = "Price Coefficient"
)
grid()



# Get the dimensions of beta draws
print(dim(out_HB_covariateswithoutconst$betadraw))  # Respondents ? Attributes ? Iterations

window()


# Extract posterior draws
burn_in <- 1800  # Set burn-in period
betadraw_converged_w <- out_HB_covariateswithoutconst$betadraw[, , (burn_in + 1):dim(out_HB_covariateswithoutconst$betadraw)[3]]

# Compute posterior means across iterations for each respondent and attribute
posterior_means_w <- apply(betadraw_converged_w, c(1, 2), mean)  # Respondents ? Attributes

summary(posterior_means_w)

#Combine iterations into a single respondent-level array for betaexchange
betaexchange_w <- array(
  aperm(betadraw_converged_w, perm = c(1, 3, 2)),
  dim = c(dim(betadraw_converged_w)[1] * dim(betadraw_converged_w)[3], dim(betadraw_converged_w)[2])
)

# Compute the mean and heterogeneity (standard deviation) across respondents
mpref_w <- cbind(
  colMeans(betaexchange_w),                # Mean preferences for each attribute
  apply(betaexchange_w, 2, sd)             # Heterogeneity (SD) of preferences
)


# Assign column names
colnames(mpref_w) <- c("Mean Preference", "SD")
rownames(mpref_w) <- colnames(E_Data_c$lgtdata[[1]]$X)

# View the results
print(round(mpref_w, digits = 3))


######computing posterior predictive 'counterfactual' choice probabilities######

Xbeta_M = choiceset %*% t(betaexchange_w)
logsumeXbeta_M = log(t(array(colSums(exp(Xbeta_M)), dim = c(dim(Xbeta_M)[2],dim(Xbeta_M)[1]))))

windows()
smoothScatter(Xbeta_M[1,],Xbeta_M[2,]);grid()
abline(0,1)

windows()
smoothScatter(Xbetas[1,],Xbetas[2,]);grid()
abline(0,1)

## choice probs for Mixed Logit without Price 
prob_M=rowMeans(exp(Xbeta_M-logsumeXbeta_M))


#######Mixed Logit (Hierarchical Bayesian) Model with price constraint########

price_index <- which(colnames(E_Data_c$lgtdata[[1]]$X) == "price")
print(price_index)  # Should return the column index for "price"

#Introducing Price Constraint
SignRes <- double(ncol(E_Data_c$lgtdata[[1]]$X))  # Initialize with zeros
SignRes[price_index] <- -1  # Constrain the price coefficient to be negative



library(bayesm)

out_HB_covariates <- rhierMnlRwMixture(
  Data = list(
    lgtdata = E_Data_c$lgtdata,  # All choice data
    Z = E_Data_c$Z,             # Covariates
    p = E_Data_c$p              # Number of alternatives per task
  ),
  Prior = list(ncomp = 1, SignRes = SignRes),  # Apply sign constraint
  Mcmc = list(R = 40000, keep = 10)           # 40,000 iterations, thinning every 10
)
#Verify Convergence of the Model
windows()
plot(out_HB_covariates$loglike, type = "l", main = "Log-Likelihood Over Iterations",
     xlab = "Iterations", ylab = "Log-Likelihood")

jpeg("log_likelihood_plot.jpg", width = 800, height = 600)
plot(out_HB_covariates$loglike, type = "l",
     main = "Log-Likelihood Over Iterations",
     xlab = "Iterations", ylab = "Log-Likelihood")
dev.off()


# Set burn-in iteration
burn_in <- 1800

# Extract converged iterations (from 18,000 onward)
betadraw_converged <- out_HB_covariates$betadraw[, , (burn_in + 1):dim(out_HB_covariates$betadraw)[3]]

# Check dimensions of the resulting array
print(dim(betadraw_converged))  # Should return Respondents ? Attributes ? Iterations

# Extract post burn-in samples
betadraw_converged <- out_HB_covariates$betadraw[, , (burn_in + 1):dim(out_HB_covariates$betadraw)[3]]

# Posterior means and standard deviations for each respondent and attribute
posterior_means <- apply(betadraw_converged, c(1, 2), mean)  # Mean across iterations
posterior_sds <- apply(betadraw_converged, c(1, 2), sd)      # SD across iterations

# Overall attribute-level summaries (averaged across respondents)
overall_means <- colMeans(posterior_means)
overall_sds <- apply(posterior_means, 2, sd)
posterior_summary <- round(cbind(Mean = overall_means, SD = overall_sds), 3)

print(posterior_summary)

#Combine iterations into a single respondent-level array for betaexchange
betaexchange <- array(
  aperm(betadraw_converged, perm = c(1, 3, 2)),
  dim = c(dim(betadraw_converged)[1] * dim(betadraw_converged)[3], dim(betadraw_converged)[2])
)

# Compute the mean and heterogeneity (standard deviation) across respondents
mpref <- cbind(
  colMeans(betaexchange),                # Mean preferences for each attribute
  apply(betaexchange, 2, sd)             # Heterogeneity (SD) of preferences
)

# Assign column names
colnames(mpref) <- c("Mean Preference", "Heterogeneity")
rownames(mpref) <- colnames(E_Data_c$lgtdata[[1]]$X)

# View the results
print(round(mpref, digits = 2))


# Compute mean preferences from the Homogeneous model
aggregate_means <- out_logit$coefficients  # Homogeneous model posterior means

# Combine respondent-level and Homogeneous-level means for comparison
comparison <- round(cbind(
  Mixed_Logit_Mean = mpref[, "Mean Preference"],  # From individual-level model
  Homogeneous_Mean = aggregate_means                    # From homogeneous model
), digits = 3)

# View the comparison
print(comparison)





######computing posterior predictive 'counterfactual' choice probabilities######

Xbeta_c = choiceset %*% t(betaexchange)
logsumeXbeta_c = log(t(array(colSums(exp(Xbeta_c)), dim = c(dim(Xbeta_c)[2],dim(Xbeta_c)[1]))))

windows()
smoothScatter(Xbeta_c[1,],Xbeta_c[2,]);grid()
abline(0,1)

## choice probs 
prob_c=rowMeans(exp(Xbeta_c-logsumeXbeta_c))

cbind(choiceset,prob_c)

#Comparison of Market share of alternatives across Homogeneous, Mixed Logit with and without constraint
cbind(prob,prob_M,prob_c) 

# Sample data as provided
data <- data.frame(
  Alternative = c("alt1", "alt2", "alt3", "outside"),
  Multinomial = c(0.2810137, 0.2126102, 0.3366937, 0.1696824),
  Mixed_Logit_without_constraint = c(0.2470248, 0.1876474, 0.4027213, 0.1626065),
  Mixed_Logit_with_price_constraint = c(0.2559295, 0.2135560, 0.3574117, 0.1731029)
)


# Reshape data for ggplot
library(reshape2)
data_long <- melt(data, id.vars = "Alternative", 
                  variable.name = "Model", 
                  value.name = "Probability")

# Create the bar chart
library(ggplot2)
ggplot(data_long, aes(x = Alternative, y = Probability, fill = Model)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Market Share Comparison Across Models",
    x = "Alternatives",
    y = "Market Share Probability",
    fill = "Model"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


# Helper function for posterior analysis
hilfana <- function(outinput, coefnames, burnin, betadraw_converged = NULL, model_type = "default") {
  # 1) Use provided `betadraw_converged` if available, otherwise extract from `outinput`
  if (is.null(betadraw_converged)) {
    betadraw <- outinput$betadraw
  } else {
    betadraw <- betadraw_converged
  }
  
  # 2) Plot log-likelihood over iterations
  windows()
  plot(outinput$loglike, type = "l", main = paste("Log-Likelihood over Iterations -", model_type))
  grid()
  
  # 3) Trace plots for the first 9 attributes
  windows()
  par(mfrow = c(3, 3))
  num_attrs_for_plot <- min(9, length(coefnames))
  for (i in seq_len(num_attrs_for_plot)) {
    draws_i <- apply(betadraw[, i, ], 2, mean)
    plot(
      x = draws_i, type = "l",
      ylab = coefnames[i],
      main = paste("Trace for Attribute", i, "-", coefnames[i], "-", model_type)
    )
    grid()
  }
  
  # 4) Extract converged draws after burn-in
  betadrawconverged <- betadraw[, , (burnin + 1):dim(betadraw)[3]]
  
  # Remaining function stays unchanged...
  # 5) Density plots, reshaping, WTP computation, etc.
  betaexchange <- array(
    aperm(betadrawconverged, perm = c(1, 3, 2)),
    dim = c(
      dim(betadrawconverged)[1] * dim(betadrawconverged)[3], 
      dim(betadrawconverged)[2]
    )
  )
  colnames(betaexchange) <- coefnames
  
  mpref <- cbind(
    Mean = colMeans(betaexchange),
    SD   = apply(betaexchange, 2, sd)
  )
  
  compWTP <- round(
    mpref / -t(array(mpref["price", ], dim = c(2, nrow(mpref)))),
    digits = 3
  )
  
  return(list(
    betaexchange = betaexchange,
    mpref = mpref,
    compWTP = compWTP
  ))
}

# Define coefnames based on your matrices
coefnames <- names(out_logit$coefficients)
# Execute the function for hierarchical Bayesian models


# Mixed logit without price constraint
hilf_HB <- hilfana(
  outinput = out_HB_covariateswithoutconst,   # Model output
  coefnames = coefnames,                      # Attribute names
  burnin = 1800,                              # Burn-in period
  betadraw_converged = betadraw_converged_w,  # Explicit posterior draws
  model_type = "without_constraint"           # Specify the model type
)

# Mixed logit with price constraint
hilf_constr <- hilfana(
  outinput = out_HB_covariates,               # Model output
  coefnames = coefnames,                      # Attribute names
  burnin = 1800,                              # Burn-in period
  model_type = "with_constraint"              # Specify the model type
)


###Price Demand Curve
###Test for alternative 1

pricedemand <- function(priceset, choiceset, betamix_unconstr, betamix_constr, out_logit) {
  priceset <- priceset / 10  # Scale prices if required
  
  probab_homog <- matrix(0, nrow = nrow(priceset), ncol = nrow(choiceset))
  probab_unconstr <- matrix(0, nrow = nrow(priceset), ncol = nrow(choiceset))
  probab_constr <- matrix(0, nrow = nrow(priceset), ncol = nrow(choiceset))
  
  for (i in seq_len(nrow(priceset))) {
    choiceset[, "price"] <- priceset[i, 1]
    
    ### Unconstrained Mixed Logit ###
    Xbeta_unconstr <- sweep(choiceset %*% t(betamix_unconstr), 1, apply(choiceset %*% t(betamix_unconstr), 1, max), "-")
    exp_Xbeta_unconstr <- exp(Xbeta_unconstr)
    probab_unconstr[i, ] <- rowMeans(exp_Xbeta_unconstr / colSums(exp_Xbeta_unconstr))
    
    ### Constrained Mixed Logit ###
    Xbeta_constr <- sweep(choiceset %*% t(betamix_constr), 1, apply(choiceset %*% t(betamix_constr), 1, max), "-")
    exp_Xbeta_constr <- exp(Xbeta_constr)
    probab_constr[i, ] <- rowMeans(exp_Xbeta_constr / colSums(exp_Xbeta_constr))
    
    ### Homogeneous Logit ###
    Xbeta_homog <- choiceset %*% out_logit$coefficients
    Xbeta_homog <- Xbeta_homog - max(Xbeta_homog)
    exp_Xbeta_homog <- exp(Xbeta_homog)
    probab_homog[i, ] <- exp_Xbeta_homog / sum(exp_Xbeta_homog)
  }
  
  return(list(probab_homog = probab_homog, probab_unconstr = probab_unconstr, probab_constr = probab_constr))
}


# Define price set for alternative 1
priceset <- seq(20, 100, 2)  # Sequence of price points
priceset_1 <- cbind(priceset, rep(30, length(priceset)), rep(76, length(priceset)))

outsim_1 <- pricedemand(
  priceset = priceset_1,
  choiceset = choiceset,
  betamix_unconstr = hilf_HB$betaexchange[runif(nrow(hilf_HB$betaexchange))>.9,],
  betamix_constr = hilf_constr$betaexchange[runif(nrow(hilf_HB$betaexchange))>.9,],
  out_logit = out_logit
)


mc_1 <- 30  # Marginal cost

# Multinomial Logit
optimal_price_homog_1 <- priceset_1[, 1][which.max(outsim_1$probab_homog[, 1] * (priceset_1[, 1] - mc_1))]

# Mixed Logit Without Constraint
optimal_price_unconstr_1 <- priceset_1[, 1][which.max(outsim_1$probab_unconstr[, 1] * (priceset_1[, 1] - mc_1))]

# Mixed Logit With Constraint
optimal_price_constr_1 <- priceset_1[, 1][which.max(outsim_1$probab_constr[, 1] * (priceset_1[, 1] - mc_1))]

# Print Results
cat("Profit-maximizing price for Multinomial Logit:", optimal_price_homog_1, "\n")
cat("Profit-maximizing price for Mixed Logit (without constraint):", optimal_price_unconstr_1, "\n")
cat("Profit-maximizing price for Mixed Logit (with constraint):", optimal_price_constr_1, "\n")



#### Define price set for second alternative

# Define price set for the second alternative, keeping others constant
priceset <- seq(20, 100, 2)  # Sequence of price points for the second alternative
priceset_2 <- cbind(rep(55, length(priceset)), priceset, rep(76, length(priceset)))

# Update the pricedemand function call
outsim_2 <- pricedemand(
  priceset = priceset_2,
  choiceset = choiceset,
  betamix_unconstr = hilf_HB$betaexchange[runif(nrow(hilf_HB$betaexchange))>.9,],
  betamix_constr = hilf_constr$betaexchange[runif(nrow(hilf_constr$betaexchange))>.9,],
  out_logit = out_logit
)

# Marginal cost
mc_2 <- 22  # Marginal cost

# Multinomial Logit for Second Alternative
optimal_price_homog_2 <- priceset_2[, 2][which.max(outsim_2$probab_homog[, 2] * (priceset_2[, 2] - mc_2))]

# Mixed Logit Without Constraint for Second Alternative
optimal_price_unconstr_2 <- priceset_2[, 2][which.max(outsim_2$probab_unconstr[, 2] * (priceset_2[, 2] - mc_2))]

# Mixed Logit With Constraint for Second Alternative
optimal_price_constr_2 <- priceset_2[, 2][which.max(outsim_2$probab_constr[, 2] * (priceset_2[, 2] - mc_2))]

# Print Results for Second Alternative
cat("Profit-maximizing price for Multinomial Logit (Alternative 2):", optimal_price_homog_2, "\n")
cat("Profit-maximizing price for Mixed Logit (without constraint, Alternative 2):", optimal_price_unconstr_2, "\n")
cat("Profit-maximizing price for Mixed Logit (with constraint, Alternative 2):", optimal_price_constr_2, "\n")

#### Define price set for third alternative


# Define price set for the third alternative, keeping others constant
priceset <- seq(20, 90, 2)  # Sequence of price points for the second alternative
priceset_3=cbind(rep(55, length(priceset)), rep(30, length(priceset)), priceset)

# Update the pricedemand function call
outsim_3 <- pricedemand(
  priceset = priceset_3,
  choiceset = choiceset,
  betamix_unconstr = hilf_HB$betaexchange[runif(nrow(hilf_HB$betaexchange))>.9,],
  betamix_constr = hilf_constr$betaexchange[runif(nrow(hilf_constr$betaexchange))>.9,],
  out_logit = out_logit
)

# Marginal cost
mc_3 <- 42  # Marginal cost

# Multinomial Logit for Second Alternative
optimal_price_homog_3 <- priceset_3[, 3][which.max(outsim_3$probab_homog[, 3] * (priceset_3[, 3] - mc_3))]

# Mixed Logit Without Constraint for Second Alternative
optimal_price_unconstr_3 <- priceset_3[, 3][which.max(outsim_3$probab_unconstr[, 3] * (priceset_3[, 3] - mc_3))]

# Mixed Logit With Constraint for Second Alternative
optimal_price_constr_3 <- priceset_3[, 3][which.max(outsim_3$probab_constr[, 3] * (priceset_3[, 3] - mc_3))]

# Print Results for Second Alternative
cat("Profit-maximizing price for Multinomial Logit (Alternative 3):", optimal_price_homog_3, "\n")
cat("Profit-maximizing price for Mixed Logit (without constraint, Alternative 3):", optimal_price_unconstr_3, "\n")
cat("Profit-maximizing price for Mixed Logit (with constraint, Alternative 3):", optimal_price_constr_3, "\n")


