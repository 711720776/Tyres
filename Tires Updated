# loading the dataset
ls(E_Data_c)

#Choice Share Calculation
countshare <- function(Xmat, yl, p, target) {
  nchoice <- nrow(Xmat) / p  # Total number of choice tasks
  neffect <- ncol(Xmat)      # Total number of attributes
  Xar <- array(t(Xmat), dim = c(neffect, p, nchoice))  # 3D array for attributes
  yar <- array(yl, dim = c(p, nchoice))  # 2D array for choices
  
  countex <- 0  # Count exposures
  countch <- 0  # Count choices
  
  for (i in 1:nchoice) {  # Loop through each choice task
    X <- t(Xar[,,i])  # Attributes matrix for the task
    y <- yar[,i]      # Choices vector for the task
    
    if (sum(X[, target]) > 0) {  # Check if the level is presented
      countex <- countex + 1  # Increment exposure counter
      if (any(X[y == 1, target] == 1)) {  # Check if the level was chosen
        countch <- countch + 1  # Increment choice counter
      }
    }
  }
  
  return(c(countch / countex, countch, countex))  # Choice share, #choices, #exposures
}


# Function to compute probabilities for a range of attribute-levels
countattribute <- function(Xmat, yl, p, attributerange) {
  out <- matrix(0, nrow = length(attributerange), ncol = 3)  # Initialize output matrix
  counter <- 0
  
  for (r in attributerange) {  # Loop through attribute range
    counter <- counter + 1
    out[counter, ] <- countshare(Xmat, yl, p, r)
  }
  
  rownames(out) <- colnames(Xmat)[attributerange]  # Set row names as attribute names
  colnames(out) <- c('choice share', '# choices', '# exposures')  # Set column names
  
  return(out)
}


# Apply the functions to your dataset
# Use E_Data_c$lgtdata and combine results across respondents
X_all <- do.call(rbind, lapply(E_Data_c$lgtdata, function(respondent) respondent$X))
y_all <- unlist(lapply(E_Data_c$lgtdata, function(respondent) respondent$y))
p <- E_Data_c$p

# Example: Calculate choice probabilities for brands
brand_range <- 2:11  # Assuming columns 2 to 10 correspond to brands
brand_probabilities <- countattribute(X_all, y_all, p, brand_range)

# View results
print(brand_probabilities)

# Example: Calculate choice probabilities for type
Type <- 12:13  # Assuming columns 11 to 12 correspond to brands
Type_probabilities <- countattribute(X_all, y_all, p, Type)

# View results
print(Type_probabilities)

# Example: Calculate choice probabilities for rolling
rolling <- 18:21  # Assuming columns 11 to 12 correspond to brands
rolling_probabilities <- countattribute(X_all, y_all, p, rolling)

# View results
print(rolling_probabilities)

# Example: Calculate choice probabilities for grip
grip <- 22:25  # Assuming columns 11 to 12 correspond to brands
grip_probabilities <- countattribute(X_all, y_all, p, grip)

# View results
print(grip_probabilities)


# Example: Calculate choice probabilities for test
test <- 31:35  # Assuming columns 11 to 12 correspond to brands
test_probabilities <- countattribute(X_all, y_all, p, test)

# View results
print(test_probabilities)


# Example: Calculate choice probabilities for review attributes
review_range <- 26:30  # Assuming columns 25 to 28 correspond to review attributes
review_probabilities <- countattribute(X_all, y_all, p, review_range)

# View results
print(review_probabilities)

# Example: Calculate choice probabilities for longevity attributes
longevity_range <- 14:17  # Assuming columns 13 to 16 correspond to longevity attributes
longevity_probabilities <- countattribute(X_all, y_all, p, longevity_range)

# View results
print(longevity_probabilities)

# Combine all attribute results into one data frame
all_probabilities <- list(
  Brands = brand_probabilities,
  Type = Type_probabilities,
  Rolling = rolling_probabilities,
  Grip = grip_probabilities,
  Test = test_probabilities,
  Review = review_probabilities,
  Longevity = longevity_probabilities
)

# Convert to a single data frame
combined_probabilities <- do.call(rbind, lapply(names(all_probabilities), function(attr) {
  prob_data <- all_probabilities[[attr]]
  data.frame(
    Attribute = attr,
    Level = rownames(prob_data),
    prob_data
  )
}))

# Display combined table
print(combined_probabilities)

write.csv(combined_probabilities, "combined_choice_probabilities.csv", row.names = FALSE)

# Subset brand probabilities
brand_probabilities_long <- data.frame(
  Brand = rownames(brand_probabilities),
  ChoiceShare = brand_probabilities[, "choice share"]
)

# Combine all attribute probabilities into one dataframe
all_attributes_probabilities <- rbind(
  data.frame(Attribute = "Type", Level = rownames(Type_probabilities), Type_probabilities),
  data.frame(Attribute = "Rolling Resistance", Level = rownames(rolling_probabilities), rolling_probabilities),
  data.frame(Attribute = "Grip", Level = rownames(grip_probabilities), grip_probabilities),
  data.frame(Attribute = "Test", Level = rownames(test_probabilities), test_probabilities),
  data.frame(Attribute = "Review", Level = rownames(review_probabilities), review_probabilities),
  data.frame(Attribute = "Longevity", Level = rownames(longevity_probabilities), longevity_probabilities)
)

# Convert to long format for ggplot
library(reshape2)
all_attributes_long <- melt(all_attributes_probabilities, 
                            id.vars = c("Attribute", "Level"), 
                            measure.vars = "choice.share",
                            variable.name = "Metric", 
                            value.name = "Value")

# Load ggplot2
library(ggplot2)

# Create the graph
ggplot(all_attributes_long, aes(x = Level, y = Value, fill = Attribute)) +
  geom_bar(stat = "identity", position = "dodge") +
  facet_wrap(~ Attribute, scales = "free_x", ncol = 2) +
  labs(title = "Choice Shares Across Attributes (Excluding Brands)",
       x = "Attribute Levels",
       y = "Choice Share") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  guides(fill = guide_legend(title = "Attributes"))

# Save the graph
ggsave("choice_shares_all_attributes.png", width = 12, height = 8, dpi = 300)


# Load the car package
library(car)

# Fit a linear model using your dataset
lm_model <- lm(price ~ ., data = as.data.frame(E_Data_c$lgtdata[[1]]$X))

# Calculate VIF for each variable in the model
vif_values <- vif(lm_model)

# View the VIF values
print(vif_values)
#Defining Baseline for categorical attributes (brand, review & tes

# Remove baseline attributes from X for all respondents
for (i in seq_along(E_Data_c$lgtdata)) {
  E_Data_c$lgtdata[[i]]$X <- E_Data_c$lgtdata[[i]]$X[, -c(2, 26, 31)]   # Remove 'michelin', 'rev_1star', 'test_1star'
}
# Fit a linear model using your dataset to check for multicollinierity
lm_model <- lm(price ~ ., data = as.data.frame(E_Data_c$lgtdata[[1]]$X))

# Calculate VIF for each variable in the model to check for multicollinierity
vif_values <- vif(lm_model)

# View the VIF values to check for multicollinierity
print(vif_values)

# Combine all respondents' X and y into single datasets
X_all <- do.call(rbind, lapply(E_Data_c$lgtdata, function(respondent) respondent$X))
y_all <- unlist(lapply(E_Data_c$lgtdata, function(respondent) respondent$y))

# Convert X_all to a dataframe for easy manipulation
X_all_df <- as.data.frame(X_all)

# Add the choice column to the dataset
X_all_df$choice <- y_all

# Exclude the price column (assume price is the first column)
X_all_df <- X_all_df[, -which(colnames(X_all_df) == "price")]

# Load the car package
library(car)

# Fit a linear model using your dataset
ols_model <- lm(choice ~ ., data = X_all_df)

# Calculate VIF for each variable in the model
vif_values <- vif(ols_model)

# View the VIF values
print(vif_values)

# Linear Model after baseline  
ols_model <- lm(choice ~ ., data = X_all_df)

# View the summary of the regression model
summary(ols_model)

# Calculate VIF for each variable in the model again to check multicollinierity
vif_values <- vif(ols_model)

# View the VIF values
print(vif_values)

# Extract coefficients for reporting
ols_coefficients <- summary(ols_model)$coefficients
print(ols_coefficients)

# Load the package
library(mclogit)

# Combine X_all (attributes) and y_all (choices) into one data frame
X_all_df <- as.data.frame(X_all)
X_all_df$choice <- y_all  # Add the choice column
X_all_df$id <- rep(1:(nrow(X_all) / E_Data_c$p), each = E_Data_c$p)  # Respondent ID
X_all_df$alt <- rep(1:E_Data_c$p, times = nrow(X_all) / E_Data_c$p)  # Alternative ID

#Multinomial Logit Model Analysis
out_logit <- mclogit(
  cbind(choice, id) ~ 
    price + continental +
    goodyear +
    bridgestone +
    pirelli +
    kleber +
    bfgoodrich +
    firestone +
    hankook +
    `low_price-brand` +
    comfort_type +
    sports_type +
    min_4thou_km +
    stand_longevity_km +
    plus_4thou_km +
    plus_8thou_km +
    fuel_eff_B +
    fuel_eff_C +
    fuel_eff_E +
    fuel_eff_F +
    grip_wet_B +
    grip_wet_C +
    grip_wet_E +
    grip_wet_F +
    rev_2star +
    rev_3star +
    rev_4star +
    rev_5star +
    test_2star +
    test_3star +
    test_4star +
    test_5star,
  data = X_all_df
)

# Summarize the model results
summary(out_logit)

#Predicted Probability of alternatives using MClogit
Brands = matrix(c(
  1, 0, 0, 0, 0, 0, 0, 0,  # Continental
  0, 1, 0, 0, 0, 0, 0, 0,  # Goodyear
  0, 0, 1, 0, 0, 0, 0, 0,  # Bridgestone
  0, 0, 0, 1, 0, 0, 0, 0,  # Pirelli
  0, 0, 0, 0, 1, 0, 0, 0,  # Kleber
  0, 0, 0, 0, 0, 1, 0, 0,  # BFGoodrich
  0, 0, 0, 0, 0, 0, 1, 0,  # Firestone
  0, 0, 0, 0, 0, 0, 0, 1,  # Hankook
  0, 0, 0, 0, 0, 0, 0, 0   # Baseline: low_price-brand
), byrow = TRUE, ncol = 8)

rownames(Brands) <- c("continental", "goodyear", "bridgestone", "pirelli", "kleber", "bfgoodrich", "firestone", "hankook", "low_price-brand")
colnames(Brands) <- rownames(Brands)[1:8]  # Exclude the baseline from column names

print(Brands)


Type = matrix(c(
  1,  # comfort_type
  0   # Baseline: sports_type
), byrow = TRUE, ncol = 1)

# Set row and column names
rownames(Type) <- c("comfort_type", "sports_type")
colnames(Type) <- "comfort_type"  # The non-baseline column

print(Type)

Longevity <- matrix(c(
  1, 0, 0,  # stand_longevity_km
  0, 1, 0,   # plus_4thou_km
  0, 0, 1,  # plus_8thou_km
  0, 0, 0    # Baseline: min_4k_km
), byrow = TRUE, ncol = 3)

# Set row and column names
rownames(Longevity) <- c("stand_longevity_km", "plus_4thou_km", "plus_8thou_km", "min_4k_km")
colnames(Longevity) <- c("stand_longevity_km", "plus_4thou_km", "plus_8thou_km")

print(Longevity)

Rolling <- matrix(c(
  1, 0, 0,  # fuel_eff_C
  0, 1, 0,  # fuel_eff_E
  0, 0, 1,  # fuel_eff_F
  0, 0, 0   # Baseline: fuel_eff_B
), byrow = TRUE, ncol = 3)

# Set row and column names
rownames(Rolling) <- c("fuel_eff_C", "fuel_eff_E", "fuel_eff_F", "fuel_eff_B")
colnames(Rolling) <- c("fuel_eff_C", "fuel_eff_E", "fuel_eff_F")

print(Rolling)

Grip <- matrix(c(
  1, 0, 0,  # grip_wet_C
  0, 1, 0,  # grip_wet_E
  0, 0, 1,  # grip_wet_F
  0, 0, 0   # Baseline: grip_wet_B
), byrow = TRUE, ncol = 3)

# Set row and column names
rownames(Grip) <- c("grip_wet_C", "grip_wet_E", "grip_wet_F", "grip_wet_B")
colnames(Grip) <- c("grip_wet_C", "grip_wet_E", "grip_wet_F")

print(Grip)

Review <- matrix(c(
  1, 0, 0,  # rev_3star
  0, 1, 0,  # rev_4star
  0, 0, 1,  # rev_5star
  0, 0, 0   # Baseline: rev_2star
), byrow = TRUE, ncol = 3)

# Set row and column names
rownames(Review) <- c("rev_3star", "rev_4star", "rev_5star", "rev_2star")
colnames(Review) <- c("rev_3star", "rev_4star", "rev_5star")

print(Review)

Test <- matrix(c(
  1, 0, 0,  # test_3star
  0, 1, 0,  # test_4star
  0, 0, 1,  # test_5star
  0, 0, 0   # Baseline: test_2star
), byrow = TRUE, ncol = 3)

# Set row and column names
rownames(Test) <- c("test_3star", "test_4star", "test_5star", "test_2star")
colnames(Test) <- c("test_3star", "test_4star", "test_5star")

print(Test)
